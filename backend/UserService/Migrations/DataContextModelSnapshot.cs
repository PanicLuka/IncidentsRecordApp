// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserService.Enitites;

namespace UserService.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserService.Enitites.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessPermissions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("ac305f0a-ec91-4c46-a5fb-493c2dc88c59"),
                            AccessPermissions = "CanAccessGetAllUsers"
                        },
                        new
                        {
                            PermissionId = new Guid("530204ff-0701-46c8-bd34-34c8c0e8fea6"),
                            AccessPermissions = "CanAccessDeleteUser"
                        },
                        new
                        {
                            PermissionId = new Guid("e58d35bb-0368-489a-b0c7-29a0a799bc82"),
                            AccessPermissions = "CanAccessUpdateUser"
                        },
                        new
                        {
                            PermissionId = new Guid("0c14e988-d157-40e7-b7d8-346abcf5aac3"),
                            AccessPermissions = "CanAccessGetByIdUser"
                        },
                        new
                        {
                            PermissionId = new Guid("98fe9a1f-dde1-49b6-a69f-d1acd0e1e14f"),
                            AccessPermissions = "CanAccessCreateUser"
                        },
                        new
                        {
                            PermissionId = new Guid("74836c59-2d06-4e3a-abe1-43147a787016"),
                            AccessPermissions = "CanAccessGetAllIncidents"
                        },
                        new
                        {
                            PermissionId = new Guid("9f85d078-64ce-4a25-b27a-05c8aede3746"),
                            AccessPermissions = "CanAccessGetIncidentById"
                        },
                        new
                        {
                            PermissionId = new Guid("1dc7ee0f-7ddd-4fe0-93e7-cdcc38746c2e"),
                            AccessPermissions = "CanAccessUpdateIncident"
                        },
                        new
                        {
                            PermissionId = new Guid("b2206c80-3d84-4e8f-904a-3d0ffbba5f06"),
                            AccessPermissions = "CanAccessDeleteIncident"
                        },
                        new
                        {
                            PermissionId = new Guid("6091f2f7-6e0e-4cb6-a7a8-575ee5a00fdf"),
                            AccessPermissions = "CanAccessCreateIncident"
                        },
                        new
                        {
                            PermissionId = new Guid("d98b342a-9d28-459c-b68f-830b268430ed"),
                            AccessPermissions = "CanPromoteToAdmin"
                        });
                });

            modelBuilder.Entity("UserService.Enitites.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("487ff1f2-af6d-4d76-8aca-0c54b90880f5"),
                            UserType = "User"
                        },
                        new
                        {
                            RoleId = new Guid("22b40e6c-59d5-4d80-93a5-d15b4201ade5"),
                            UserType = "Admin"
                        });
                });

            modelBuilder.Entity("UserService.Enitites.RolePermission", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("rolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("487ff1f2-af6d-4d76-8aca-0c54b90880f5"),
                            PermissionId = new Guid("74836c59-2d06-4e3a-abe1-43147a787016")
                        },
                        new
                        {
                            RoleId = new Guid("22b40e6c-59d5-4d80-93a5-d15b4201ade5"),
                            PermissionId = new Guid("74836c59-2d06-4e3a-abe1-43147a787016")
                        },
                        new
                        {
                            RoleId = new Guid("22b40e6c-59d5-4d80-93a5-d15b4201ade5"),
                            PermissionId = new Guid("9f85d078-64ce-4a25-b27a-05c8aede3746")
                        },
                        new
                        {
                            RoleId = new Guid("22b40e6c-59d5-4d80-93a5-d15b4201ade5"),
                            PermissionId = new Guid("1dc7ee0f-7ddd-4fe0-93e7-cdcc38746c2e")
                        },
                        new
                        {
                            RoleId = new Guid("22b40e6c-59d5-4d80-93a5-d15b4201ade5"),
                            PermissionId = new Guid("b2206c80-3d84-4e8f-904a-3d0ffbba5f06")
                        });
                });

            modelBuilder.Entity("UserService.Enitites.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("487ff1f2-af6d-4d76-8aca-0c54b90880f5"));

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c5c49a80-5142-4e54-9d17-c1681dfa8607"),
                            Email = "marko@gmail.com",
                            FirstName = "Marko",
                            LastName = "Milic",
                            Password = "123456",
                            RoleId = new Guid("487ff1f2-af6d-4d76-8aca-0c54b90880f5")
                        },
                        new
                        {
                            UserId = new Guid("c37ed033-4573-49bc-9f28-afbf995cab79"),
                            Email = "Nikola@gmail.com",
                            FirstName = "Nikola",
                            LastName = "Milic",
                            Password = "123456",
                            RoleId = new Guid("22b40e6c-59d5-4d80-93a5-d15b4201ade5")
                        });
                });

            modelBuilder.Entity("UserService.Enitites.UserPermission", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c5c49a80-5142-4e54-9d17-c1681dfa8607"),
                            PermissionId = new Guid("b2206c80-3d84-4e8f-904a-3d0ffbba5f06")
                        },
                        new
                        {
                            UserId = new Guid("c37ed033-4573-49bc-9f28-afbf995cab79"),
                            PermissionId = new Guid("6091f2f7-6e0e-4cb6-a7a8-575ee5a00fdf")
                        });
                });

            modelBuilder.Entity("UserService.Enitites.RolePermission", b =>
                {
                    b.HasOne("UserService.Enitites.Permission", "permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Enitites.Role", "role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("UserService.Enitites.User", b =>
                {
                    b.HasOne("UserService.Enitites.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserService.Enitites.UserPermission", b =>
                {
                    b.HasOne("UserService.Enitites.Permission", "permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Enitites.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
