// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserService.Enitites;

namespace UserService.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220408081832_UserMigration")]
    partial class UserMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserService.Enitites.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessPermissions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("723bb965-8689-4934-a9a2-5442942e5473"),
                            AccessPermissions = "UserGetAll"
                        },
                        new
                        {
                            PermissionId = new Guid("3b342250-a052-4d8f-8433-08c45f258d02"),
                            AccessPermissions = "UserDelete"
                        },
                        new
                        {
                            PermissionId = new Guid("dbf4f926-0ea6-4c70-971d-6f87ef4d4aa2"),
                            AccessPermissions = "UserUpdate"
                        },
                        new
                        {
                            PermissionId = new Guid("b37105b5-f801-4218-af95-47c4b61f07c6"),
                            AccessPermissions = "UserGetById"
                        },
                        new
                        {
                            PermissionId = new Guid("44114348-5c6f-444e-88cb-0e36369dbb53"),
                            AccessPermissions = "UserCreateUser"
                        },
                        new
                        {
                            PermissionId = new Guid("7daa70f5-9de0-4a73-974e-03c2b8f33637"),
                            AccessPermissions = "IncidentsGetAll"
                        },
                        new
                        {
                            PermissionId = new Guid("d6bead18-e752-4d9e-bf85-fe6cda2b2754"),
                            AccessPermissions = "IncidentsGetById"
                        },
                        new
                        {
                            PermissionId = new Guid("6bf02553-ea87-4b11-95b3-a853d7fdc58f"),
                            AccessPermissions = "IncidentsUpdate"
                        },
                        new
                        {
                            PermissionId = new Guid("3202b090-4d7e-4049-81d6-4e5c909288c9"),
                            AccessPermissions = "IncidentsDelete"
                        },
                        new
                        {
                            PermissionId = new Guid("65a007bb-221e-49fc-8201-37d6c1e11b8c"),
                            AccessPermissions = "IncidentsCreate"
                        },
                        new
                        {
                            PermissionId = new Guid("968852ea-a13f-4896-9bb6-be970c3ca2f1"),
                            AccessPermissions = "PromoteToAdmin"
                        });
                });

            modelBuilder.Entity("UserService.Enitites.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("57677386-3999-4011-ba64-085b2f321e3f"),
                            UserType = "User"
                        },
                        new
                        {
                            RoleId = new Guid("c16c32eb-95ae-45e3-8641-6304d8d8759e"),
                            UserType = "Admin"
                        });
                });

            modelBuilder.Entity("UserService.Enitites.RolePermission", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("rolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("57677386-3999-4011-ba64-085b2f321e3f"),
                            PermissionId = new Guid("7daa70f5-9de0-4a73-974e-03c2b8f33637")
                        },
                        new
                        {
                            RoleId = new Guid("c16c32eb-95ae-45e3-8641-6304d8d8759e"),
                            PermissionId = new Guid("7daa70f5-9de0-4a73-974e-03c2b8f33637")
                        },
                        new
                        {
                            RoleId = new Guid("c16c32eb-95ae-45e3-8641-6304d8d8759e"),
                            PermissionId = new Guid("d6bead18-e752-4d9e-bf85-fe6cda2b2754")
                        },
                        new
                        {
                            RoleId = new Guid("c16c32eb-95ae-45e3-8641-6304d8d8759e"),
                            PermissionId = new Guid("6bf02553-ea87-4b11-95b3-a853d7fdc58f")
                        },
                        new
                        {
                            RoleId = new Guid("c16c32eb-95ae-45e3-8641-6304d8d8759e"),
                            PermissionId = new Guid("3202b090-4d7e-4049-81d6-4e5c909288c9")
                        });
                });

            modelBuilder.Entity("UserService.Enitites.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("57677386-3999-4011-ba64-085b2f321e3f"));

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aa4cf009-44b7-4413-89dc-00902bdd3bf7"),
                            Email = "marko@gmail.com",
                            FirstName = "Marko",
                            LastName = "Milic",
                            Password = "123456",
                            RoleId = new Guid("57677386-3999-4011-ba64-085b2f321e3f")
                        },
                        new
                        {
                            UserId = new Guid("e16e702f-cbcf-47a5-a2ed-e2ded8aeb5c3"),
                            Email = "Nikola@gmail.com",
                            FirstName = "Nikola",
                            LastName = "Milic",
                            Password = "123456",
                            RoleId = new Guid("c16c32eb-95ae-45e3-8641-6304d8d8759e")
                        });
                });

            modelBuilder.Entity("UserService.Enitites.UserPermission", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aa4cf009-44b7-4413-89dc-00902bdd3bf7"),
                            PermissionId = new Guid("3202b090-4d7e-4049-81d6-4e5c909288c9")
                        },
                        new
                        {
                            UserId = new Guid("e16e702f-cbcf-47a5-a2ed-e2ded8aeb5c3"),
                            PermissionId = new Guid("65a007bb-221e-49fc-8201-37d6c1e11b8c")
                        });
                });

            modelBuilder.Entity("UserService.Enitites.RolePermission", b =>
                {
                    b.HasOne("UserService.Enitites.Permission", "permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Enitites.Role", "role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("UserService.Enitites.User", b =>
                {
                    b.HasOne("UserService.Enitites.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserService.Enitites.UserPermission", b =>
                {
                    b.HasOne("UserService.Enitites.Permission", "permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Enitites.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
