// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserService.Entities;

namespace UserService.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220503092433_NewMigration")]
    partial class NewMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserService.Enitites.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessPermission")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("f0c38bf6-4953-4faa-b1de-7f0ca43a3158"),
                            AccessPermission = "UserGetAll"
                        },
                        new
                        {
                            PermissionId = new Guid("ed26b6cf-e434-417b-990d-f61920c0ebac"),
                            AccessPermission = "UserDelete"
                        },
                        new
                        {
                            PermissionId = new Guid("88af7d32-ee30-4627-9d9f-e565bd41ffc8"),
                            AccessPermission = "UserUpdate"
                        },
                        new
                        {
                            PermissionId = new Guid("3214d45e-c75a-4ce1-9612-2a9526d6084d"),
                            AccessPermission = "UserGetById"
                        },
                        new
                        {
                            PermissionId = new Guid("aa503b6c-ef8d-4cb8-b883-96f870dbe81a"),
                            AccessPermission = "UserCreateUser"
                        },
                        new
                        {
                            PermissionId = new Guid("63757663-cfce-4527-bafd-d87ae0c18061"),
                            AccessPermission = "IncidentsGetAll"
                        },
                        new
                        {
                            PermissionId = new Guid("530252cb-3bf6-439d-9b32-aef0a41fa653"),
                            AccessPermission = "IncidentsGetById"
                        },
                        new
                        {
                            PermissionId = new Guid("938011c5-e67e-43d5-9038-5b01f837b96f"),
                            AccessPermission = "IncidentsUpdate"
                        },
                        new
                        {
                            PermissionId = new Guid("58cb9d88-49da-4a76-832a-4c2db4d900e9"),
                            AccessPermission = "IncidentsDelete"
                        },
                        new
                        {
                            PermissionId = new Guid("1e6862c8-f8e5-4566-a395-1116f5e3d53a"),
                            AccessPermission = "IncidentsCreate"
                        },
                        new
                        {
                            PermissionId = new Guid("b8cb3860-b899-4575-9aee-6fff9cc1271e"),
                            AccessPermission = "PromoteToAdmin"
                        });
                });

            modelBuilder.Entity("UserService.Enitites.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("856a900e-b033-46bb-853e-e400b65848ee"),
                            UserType = "User"
                        },
                        new
                        {
                            RoleId = new Guid("ab439b71-e326-4794-af4d-c5d7ed946640"),
                            UserType = "Admin"
                        });
                });

            modelBuilder.Entity("UserService.Enitites.RolePermission", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("856a900e-b033-46bb-853e-e400b65848ee"),
                            PermissionId = new Guid("63757663-cfce-4527-bafd-d87ae0c18061")
                        },
                        new
                        {
                            RoleId = new Guid("ab439b71-e326-4794-af4d-c5d7ed946640"),
                            PermissionId = new Guid("63757663-cfce-4527-bafd-d87ae0c18061")
                        },
                        new
                        {
                            RoleId = new Guid("ab439b71-e326-4794-af4d-c5d7ed946640"),
                            PermissionId = new Guid("530252cb-3bf6-439d-9b32-aef0a41fa653")
                        },
                        new
                        {
                            RoleId = new Guid("ab439b71-e326-4794-af4d-c5d7ed946640"),
                            PermissionId = new Guid("938011c5-e67e-43d5-9038-5b01f837b96f")
                        },
                        new
                        {
                            RoleId = new Guid("ab439b71-e326-4794-af4d-c5d7ed946640"),
                            PermissionId = new Guid("58cb9d88-49da-4a76-832a-4c2db4d900e9")
                        });
                });

            modelBuilder.Entity("UserService.Enitites.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("856a900e-b033-46bb-853e-e400b65848ee"));

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d26f54b3-e932-4b0d-868b-711e503ff498"),
                            Email = "marko@gmail.com",
                            FirstName = "Marko",
                            LastName = "Milic",
                            Password = "Test12345",
                            RoleId = new Guid("856a900e-b033-46bb-853e-e400b65848ee")
                        },
                        new
                        {
                            UserId = new Guid("8ebe5aac-9b20-4653-82c8-f75fcbdf7200"),
                            Email = "nikola@gmail.com",
                            FirstName = "Nikola",
                            LastName = "Milic",
                            Password = "Test12345",
                            RoleId = new Guid("ab439b71-e326-4794-af4d-c5d7ed946640")
                        });
                });

            modelBuilder.Entity("UserService.Enitites.UserPermission", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d26f54b3-e932-4b0d-868b-711e503ff498"),
                            PermissionId = new Guid("58cb9d88-49da-4a76-832a-4c2db4d900e9")
                        },
                        new
                        {
                            UserId = new Guid("8ebe5aac-9b20-4653-82c8-f75fcbdf7200"),
                            PermissionId = new Guid("1e6862c8-f8e5-4566-a395-1116f5e3d53a")
                        });
                });

            modelBuilder.Entity("UserService.Enitites.RolePermission", b =>
                {
                    b.HasOne("UserService.Enitites.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Enitites.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserService.Enitites.User", b =>
                {
                    b.HasOne("UserService.Enitites.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserService.Enitites.UserPermission", b =>
                {
                    b.HasOne("UserService.Enitites.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Enitites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
